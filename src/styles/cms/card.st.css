@st-import CMS, [
  --spacing-unit,
  --light-01,
  --color-ui,
  --color-ui-inverse,
  --color-accent-1,
  --color-header-background,
  --color-background-3,
  --color-background-contrast-1,
  --color-background-contrast-2,
  --color-text-4
] from "./project.st.css";

@st-import Card, [header, media, content] from "../../components/Card/card.st.css";
@st-import Text from "@actionishope/shelley/components/Text/text.st.css";

:vars {
  hoverTransition: background-color 200ms cubic-bezier(0.4, 0, 0.2, 1);
}

.hasIcon {
  /* 
   * We use icons inside Text elements, makes it easier to align them.
   * See: https://github.com/action-is-hope/shelley/issues/104
   */
  display: flex;
  gap: calc(var(--spacing-unit) /4);
  align-items: center
}

@st-scope CMS {
  Card {
    background-color: var(--color-background-contrast-1);
    color: var(--color-text-4);
    position: relative;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-areas:
      'header'
      'media'
      'content'
      'actions';
    max-width: 345px;
  }

  Card .hasIcon {}

  Card Text svg {
    font-size: 1.2em;
  }

  Card Text code {
    color: inherit;
    font-weight: 400;
    line-height: 2.2em;
  }

  /* = MainButton */

  Card::mainButton {
    padding: 0;
    border: none;
    /**
     * We stack this button from row one down to the end of content 
     * so you can use this in conjuction with CardAction without the
     * button obscuring the CardActions. 
     */
    grid-row-start: 1;
    grid-column-start: 1;
    grid-row-end: content;
    grid-column-end: content;
  }

  Card::mainButton::inner {
    /* We don't want to see this button but we do want to see it's focus state so we just hide the inner. */
    opacity: 0;
  }

  Card::mainButton::after {
    /* This affects the keyboard focus element. */
    border-radius: 0;
  }

  /* = CardHeader */
  Card::header {
    grid-area: header;
    display: flex;
    align-items: center;
    gap: 8px;
    padding: calc(var(--spacing-unit) / 2) var(--spacing-unit);
    background-color: var(--color-header-background);
    color: var(--light-01);
    transition: value(hoverTransition);
  }

  Card::header :global(h2)Text,
  Card::header :global(h3)Text {
    -st-mixin: hasIcon;
    justify-content: space-between;
    line-height: 1.3;
    width: 100%;
  }



  /* For hovers we are using adjacent selectors, to get 
  * them to work we import the .header directly and use 
  * it like a regular class .*/
  Card::mainButton:hover + .header {
    background-color: #0d727e;
  }

  /* = CardMedia */

  Card::media {
    grid-area: media;
  }

  Card::media img {
    width: 100%;
    height: 100%;
    /* override this depending on how you want to render your images. */
    object-fit: cover;
  }

  /* = CardContent */

  Card::content {
    grid-area: content;
    padding: var(--spacing-unit);
    transition: value(hoverTransition);
  }

  Card::content :global(h2)Text,
  Card::content :global(h3)Text {
    color: var(--color-ui);
  }

  Card::content :global(h2)Text:first-child,
  Card::content :global(h3)Text:first-child {
    margin-top: calc(var(--spacing-unit) * -.5);
  }

  Card::mainButton:hover + .media + .content {
    background-color: #f2f2f2;
    background-color: var(--color-background-contrast-2);
  }

  /* = CardActions */

  Card::actions {
    grid-area: actions;
    display: flex;
    align-items: center;
  }

}
